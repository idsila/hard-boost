require("dotenv").config();

const commands = require("./commands.js");
const dataBase = require("./dataBase.js");

const { Telegraf, session, Scenes } = require("telegraf");
const express = require("express");
const axios = require("axios");
const cors = require("cors");
const app = express();
const fs = require("fs");

const obj = JSON.parse(fs.readFileSync("log.json"));

const followers = obj.filter((item) => item.category === "Telegram");
const views = obj.filter( (item) => item.name.includes("—Ä–æ—Å–º–æ—Ç—Ä") && item.category === "Telegram —Ä–µ–∞–∫—Ü–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã");
const reactions = obj.filter(
  (item) =>
    item.name.includes("–µ–∞–∫—Ü–∏") &&
    item.category === "Telegram —Ä–µ–∞–∫—Ü–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
);
const boosts = obj.filter((item) => item.category === "Telegram Boost");
const stars = obj.filter((item) => item.category === "Telegram Stars");

app.use(cors({ methods: ["GET", "POST"] }));
app.use(express.json());

const ADMIN_ID = 7502494374;

const bot = new Telegraf(process.env.TOKEN);
bot.use(
  session({
    defaultSession: () => ({ write_user: false }),
    defaultSession: () => ({ write_admin: false }),

    defaultSession: () => ({ order_followers: false }),
    defaultSession: () => ({ ai_disabled: false }),
    defaultSession: () => ({ ai_answer: false }),
  })
);

function refCode(n = 6) {
  const symbols =
    "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890";
  let user_hash = "";
  for (let i = 0; i != n; i++) {
    user_hash += symbols[Math.floor(Math.random() * symbols.length)];
  }
  return user_hash;
}

//bot.telegram.setMyCommands(commands);

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∫–∞–Ω–∞–ª
bot.on("chat_join_requests", async (ctx) => {
  const {
    chat,
    from: { id, first_name, username, language_code },
    date,
  } = ctx.chatJoinRequest;
  dataBase.findOne({ username }).then(async (res) => {
    if (!res) {
      //–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞
      dataBase.insertOne({
        id,
        first_name,
        username,
        language_code,
        ref_code: refCode(),
        referrals: 0,
        date: dateNow(),
        balance: 0,
        data_channel: { chat: chat, date: date, join: false },
      });
    } else if (res.data_channel === null || res.data_channel?.join) {
      //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      dataBase.updateOne(
        { username },
        { $set: { data_channel: { chat: chat, date: date, join: false } } }
      );
    }
  });

  await bot.telegram.sendPhoto(
    id,
    "https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg",
    {
      caption:
        " üîê <b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à —Ç–≥ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. </b>",
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–Ø –Ω–µ —Ä–æ–±–æ—Ç üöÄ", callback_data: "approve_join" }],
        ],
      },
    }
  );
});
bot.action("approve_join", async (ctx) => {
  const { id, first_name, username, language_code } =
    ctx.update.callback_query.from;
  dataBase.findOne({ username }).then(async (res) => {
    if (res) {
      if (!res.data_channel?.join || res.data_channel === null) {
        await dataBase.updateOne(
          { username },
          {
            $set: {
              data_channel: {
                chat: res.data_channel.chat,
                date: res.data_channel.date,
                join: true,
              },
            },
          }
        );
        await ctx.telegram.approveChatJoinRequest(res.data_channel.chat.id, id);
        await ctx.reply("üõ†Ô∏è <b>–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", { parse_mode: "HTML" });
      } else {
        await ctx.reply("üèÅ <b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", {
          parse_mode: "HTML",
        });
      }
    }
  });
});

//–°—Ü–µ–Ω—ã

const writeHelp = new Scenes.WizardScene(
  "write_help",
  (ctx) => {
    ctx.session.write_user = true;
    ctx.reply("<b>–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.</b>", {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.from;

    if (
      (ctx.callbackQuery?.data === "help" && ctx.session.write_user) ||
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_user = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    ctx.session.write_user = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(ADMIN_ID, photo.file_id, {
        caption: `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> \n <blockquote>${
          ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"
        }</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        ADMIN_ID,
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞.</b>`, {
      parse_mode: "HTML",
    });
    return ctx.scene.leave();
  }
);

const writeHelpAdmin = new Scenes.WizardScene(
  "write_help_admin",
  (ctx) => {
    const { id, username } = ctx.scene.state;
    ctx.session.write_admin = true;
    ctx.reply(`<b>–û—Ç–≤–µ—á–∞–µ–º > @${username}</b>`, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_user_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.scene.state;

    if (ctx.callbackQuery?.data.startsWith("user") && ctx.session.write_admin) {
      ctx.session.write_admin = false;
      return ctx.scene.leave();
    }

    if (
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_admin = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    ctx.session.write_admin = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(id, photo.file_id, {
        caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
        \n<blockquote>${ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"}</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        id,
        `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>`, { parse_mode: "HTML" });
    return ctx.scene.leave();
  }
);

const orderFollowers = new Scenes.WizardScene(
  "order_followers",
  (ctx) => {
    ctx.session.order_followers = true;
    
    if (ctx.callbackQuery?.data === "cancel_scena" ) {
      ctx.session.order_followers = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    
    const currentService = followers.find((item) => item.service == ctx.wizard.state.service);

    if (ctx.message?.text >= currentService.min && ctx.message?.text <= currentService.max) {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
      ctx.wizard.state.amount = ctx.message?.text * 1;
      ctx.wizard.state.pay =
        (currentService.rate / 1000) * (ctx.message?.text * 1);
      ctx.wizard.state.currentService = currentService;
      return ctx.wizard.next();
    } else {
      ctx.reply(
        `<b>üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–¶–µ–Ω–Ω–∞ –∑–∞ 1—à—Ç: ${(currentService.rate / 1000).toLocaleString(
          "ru-RU"
        )}</blockquote>
<blockquote>–ú–∏–Ω–∏–º—É–º: ${currentService.min.toLocaleString("ru-RU")}</blockquote>
<blockquote>–ú–∞–∫—Å–∏–º—É–º: ${currentService.max.toLocaleString("ru-RU")}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  },
  (ctx) => {
    console.log(ctx.callbackQuery?.data)
    if (ctx.callbackQuery?.data === "cancel_scena" ) {
      ctx.session.order_followers = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    
    //console.log(ctx.wizard.state);
    const currentService = followers.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (ctx.message?.text.includes("https://t.me/")) {
      const idOrder = refCode();
      ctx.reply(
        `<b>üìù –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑: #${idOrder}</b>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.amount.toLocaleString(
          "ru-RU"
        )}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString(
          "ru-RU"
        )}‚ÇΩ</blockquote>
<blockquote>–°—ã–ª–∫–∞: ${ctx.message?.text}</blockquote>
       
        
            `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                  callback_data: "pay",
                },
              ],
            ],
          },
        }
      );
      console.log("NEXT2");
      ctx.session.order_followers = false;
      return ctx.scene.leave();
    } else {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>
        
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  }
);

const stage = new Scenes.Stage([writeHelp, writeHelpAdmin, orderFollowers]);
bot.use(stage.middleware());

// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é inline –∫–Ω–æ–ø–∫–∏
bot.action(/^user/i, async (ctx) => {
  if (!ctx.session.write_admin) {
    ctx.session.write_admin = false;
    const [, id, username] = ctx.match.input.split("_");
    ctx.scene.enter("write_help_admin", { id, username });
  }
});

bot.action(/^followers_/i, async (ctx) => {
  if (!ctx.session.order_followers) {
    ctx.session.order_followers = false;
    const [, id, service] = ctx.match.input.split("_");

    ctx.scene.enter("order_followers", { id, service });
  }
});

bot.action("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.action("menu", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/qYJqZjqG/card-1001.jpg", {
    caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
          { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
        ],
        [
          { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
          { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
        ],
        [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
        [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});

bot.action("menu_back", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg",
      caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
            { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
          ],
          [
            { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
            { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
          ],
          [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
          [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
          [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
        ],
      },
    }
  );
});

bot.action("pay_balance", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/tTQ574gv/card-1002.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</b>",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üí≥ –ö–∞—Ä—Ç–∞", callback_data: `pay_umoney` },
            { text: "üß† –ö—Ä–∏–ø—Ç–∞", callback_data: `pay_crypto` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }],
        ],
      },
    }
  );
});

bot.action("pay_umoney", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/fbWNWJY/card-1003.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ÆMoney.</b>",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "50‚ÇΩ", callback_data: `pay_umoney_50` },
            { text: "100‚ÇΩ", callback_data: `pay_umoney_100` },
            { text: "150‚ÇΩ", callback_data: `pay_umoney_150` },
          ],
          [
            { text: "200‚ÇΩ", callback_data: `pay_umoney_200` },
            { text: "250‚ÇΩ", callback_data: `pay_umoney_250` },
            { text: "300‚ÇΩ", callback_data: `pay_umoney_300` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `pay_balance` }],
        ],
      },
    }
  );
});





//–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∫—Ä—É—Ç–∫–∏

bot.action("buy_followers", async (ctx) => {
  const { id } = ctx.from;

  const keyboard = followers.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `followers_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);
  
   await ctx.editMessageMedia(
    {
    type: "photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg",
    caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—É.",
    parse_mode: "HTML"
    },
    {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});

bot.action("buy_views", async (ctx) => {
  const keyboard = views.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: item.service,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
    type: "photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg", 
    caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—É.",
    parse_mode: "HTML"
    },{
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});

bot.action("buy_reactions", async (ctx) => {
  const keyboard = reactions.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: item.service,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
    type: "photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg", 
    caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—É.",
    parse_mode: "HTML"
    },{
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});

bot.action("buy_boosts", async (ctx) => {
  const keyboard = boosts.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: item.service,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
    type: "photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg", 
    caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1—à—Ç.",
    parse_mode: "HTML"
    },{
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});

bot.action("buy_stars", async (ctx) => {
  const keyboard = stars.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: item.service,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
    type: "photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg", 
    caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –æ–ø—Ç–æ–º –∑–∞ 1 —Ç—ã—Å—è—É",
    parse_mode: "HTML"
    },{
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ id –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot.on("channel_post", async (ctx) => {
  const {
    chat: { id, title },
  } = ctx.channelPost;
  console.log(id, title);
  dataBase.findOne({ id }).then(async (res) => {
    if (!res) {
      console.log("–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª");
      dataBase.insertOne({ id, title });
    }
  });
});

bot.command("check", async (ctx) => {
  const { id } = ctx.from;
  const use = await bot.telegram.getChatMember(-1002760111651, id);
  if (use.status !== "left") {
    ctx.reply("+");
  } else {
    ctx.reply("-");
  }
});



// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–∑ keyboard
bot.hears("üóÇÔ∏è –ú–µ–Ω—é", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.replyWithPhoto("https://i.ibb.co/qYJqZjqG/card-1001.jpg", {
    caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
          { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
        ],
        [
          { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
          { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
        ],
        [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
        [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});
bot.hears("üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx) => {
  await ctx.deleteMessage();
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});
bot.hears("üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;
  dataBase.findOne({ username }).then(async (res) => {
    await ctx.deleteMessage();
    await ctx.reply(
      `<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ üë® –∞–∫–∫–∞—É–Ω—Ç—É:</b>\nüÜî ID: <code>${res.id}</code>
üí∞ –ë–∞–ª–∞–Ω—Å: ${res.balance} ‚ÇΩ

ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: - /ref
‚Äç‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${res.referrals}
`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
          ],
        },
      }
    );
  });
});

// –ö–æ–º–º–∞–Ω–¥—ã
bot.command("start", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;
  const refHashRaw = ctx.payload;

  console.log(refHashRaw);

  dataBase.findOne({ id, first_name, username }).then(async (res) => {
    if (!res) {
      console.log("–ó–∞–ø–∏—Å—å  —Å–æ–∑–¥–∞–µ—Ç—å—Å—è");
      dataBase.insertOne({
        id,
        first_name,
        username,
        language_code,
        referrals: 0,
        ref_code: refCode(),
        date: dateNow(),
        balance: 0,
        data_channel: null,
      });
      if (refHashRaw) {
        const refHash = refHashRaw.split("_")[1];
        dataBase.updateOne({ ref_code: refHash }, { $inc: { referrals: 1 } });
      }
    } else {
      console.log("–ó–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞");
    }
  });

  ctx.replyWithPhoto("https://i.ibb.co/0jmGR3S4/card-1000.jpg", {
    caption: ` <b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HardBoost!</b>

<blockquote><b>–¢–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞:</b>
‚ú® –ù–∞–∫—Ä—É—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Äì –±–æ—Ç—ã 
üëÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Äì –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚ù§Ô∏è –†–∞–∑–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏  ‚Äì –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤
</blockquote>
<blockquote><b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>
üìå –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äì –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
üìå –ê–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
üìå –õ—É—á—à–∏–µ —Ü–µ–Ω—ã ‚Äì –¥–µ—à–µ–≤–ª–µ, —á–µ–º —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
</blockquote>
    
`,
    parse_mode: "HTML",
    reply_markup: {
      keyboard: [
        [{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }],
        [{ text: "üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: `translate` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});

bot.command("ref", async (ctx) => {
  const { id } = ctx.from;
  dataBase.findOne({ id }).then(async (res) => {
    const refLink = `https://t.me/${ctx.botInfo.username}?start=ref_${res.ref_code}`;
    await ctx.reply(
      `üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>${refLink}</code>\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã! üéÅ`,
      { parse_mode: "HTML" }
    );
  });
});

bot.command("drop", async (ctx) => {
  dataBase.deleteMany({});
  ctx.reply("DROP COLLECTION");
});

bot.command("about", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/rf08CWL0/card-1008.jpg", {
    caption: `‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n<blockquote>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç

‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
‚Ä¢ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º

‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏
‚Ä¢ –û–ø–ª–∞—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ÆMoney

‚Ä¢ –ü–æ–∫—É–ø–∞ –∑–≤–µ–∑–¥
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑–∞–≥—Ä—ã—à–µ–π
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–∏–∫—Ç–æ–∫–∞
</blockquote>\nüì± <b>–ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n<blockquote>‚Ä¢ –ö–æ–ø–∏—è –∫–ª–∏–∫–µ—Ä–∞ Notcoin
‚Ä¢ –ö–æ–ø–∏—è —Ñ–µ–π–∫ –∫–∞–∑–∏–Ω–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∏
</blockquote>

`,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [[{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }]],
    },
  });
});

bot.command("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.command("db", async (ctx) => {
  dataBase.find({}).then((res) => {
    ctx.reply("```js" + JSON.stringify(res, null, 2) + "```", {
      parse_mode: "Markdown",
    });
  });
});





//bot.on('text', ctx => console.log(ctx.update.message.from));

const delay = (ms) =>
  new Promise((res) => {
    setTimeout(() => res(), ms);
  });



bot.launch();


function dateNow() {
  return new Date().getTime();
}

app.get("/sleep", async (req, res) => {
  res.send({ type: 200 });
});

app.listen(3000, (err) => {
  err ? err : console.log("STARTED SERVER");
});
