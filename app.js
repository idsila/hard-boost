require("dotenv").config();

const commands = require("./commands.js");
const dataBase = require("./dataBase.js");
const orderBase = require("./orderBase.js");

const { Telegraf, session, Scenes } = require("telegraf");
const express = require("express");
const axios = require("axios");
const cors = require("cors");
const app = express();
const querystring = require("querystring");
const fs = require("fs");
const { channel } = require("diagnostics_channel");

const obj = JSON.parse(fs.readFileSync("log.json"));

const followers = obj.filter((item) => item.category === "Telegram");
const views = obj.filter(
  (item) =>
    item.name.includes("—Ä–æ—Å–º–æ—Ç—Ä") &&
    item.category === "Telegram —Ä–µ–∞–∫—Ü–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
);
const reactions = obj.filter(
  (item) =>
    item.name.includes("–µ–∞–∫—Ü–∏") &&
    item.category === "Telegram —Ä–µ–∞–∫—Ü–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
);
const boosts = obj.filter((item) => item.category === "Telegram Boost");
const stars = obj.filter((item) => item.category === "Telegram Stars");

app.use(cors({ methods: ["GET", "POST"] }));
app.use(express.json());

const ADMIN_ID = 7502494374;

const bot = new Telegraf(process.env.TOKEN);
const OPTSMM_KEY = process.env.OPTSMM_KEY;
bot.use(
  session({
    defaultSession: () => ({ write_user: false }),
    defaultSession: () => ({ write_admin: false }),

    defaultSession: () => ({ order_scena: false }),
    // defaultSession: () => ({ bonus_scena: false }),
  })
);


// let count = 0;

let timerOrder = null;


bot.on("chat_join_request", async (ctx) => {
  const { chat, from: { id, first_name, username } } = ctx.chatJoinRequest;

  dataBase.findOne({ chat_id: chat.id }).then(async (res) => {
    console.log(res?.subscribers);
    if(!res){
      
    }
    else{
      dataBase.updateOne({ chat_id: chat.id }, { $inc: { subscribers: 1 } });
      clearInterval(timerOrder);

      timerOrder = setInterval(() => {

        axios(`https://optsmm.ru/api/v2?action=status&order=${res.order}&key=${OPTSMM_KEY}`)
        .then(optsmm => {
          const { status } = optsmm.data;
          
          
          if(status != 'In progress' || status != 'Awaiting'){
            console.log(optsmm.data.status);
            if(res.subscribers < res.limit){
              axios(`https://optsmm.ru/api/v2?action=add&service=84&link=${res.url}&quantity=1000&key=${OPTSMM_KEY}`)
              .then(optsmm => {
                ctx.reply('–ó–∞–∫–∞–∑–∞–ª –µ—â–µ');
                console.log('–ó–∞–∫–∞–∑–∞–ª –µ—â–µ', optsmm.data.order);
                dataBase.updateOne({ chat_id: res.chat_id }, { $set: { order: optsmm.data.order } });
              });
            }
            else{
              ctx.replyWithPhoto("https://i.postimg.cc/Y0SQY9pp/card-final.jpg", {
                caption: ` <b>üéâ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞–∫—Ä—É—á–µ–Ω–Ω—ã!</b>       
<blockquote><b>–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${res.subscribers}/${res.limit}üöÄ</blockquote>
              
            `,
                parse_mode: "HTML",
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data: "remove_post" }]
             ],
                },
              });
              clearInterval(timerOrder);
            }
          }
          else{
            ctx.reply('–ï—â–µ –Ω–µ –≤—Å—ë!');
          }
        });
      }, 2000 * 5);
    }
  });


  // count++;
  // console.log( chat, id, first_name, username );
  // console.log(count);

  //{ id: -1003042621539, title: '–í–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏', type: 'channel' } 7502494374 idsilax idsilax
});

//1



//bot.telegram.setMyCommands(commands);

//–°—Ü–µ–Ω—ã

const writeHelp = new Scenes.WizardScene(
  "write_help",
  (ctx) => {
    ctx.session.write_user = true;
    ctx.reply(
      "<b>–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.</b>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_help" }],
          ],
        },
      }
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.from;

    if (
      (ctx.callbackQuery?.data === "help" && ctx.session.write_user) ||
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_user = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    ctx.session.write_user = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(ADMIN_ID, photo.file_id, {
        caption: `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> \n <blockquote>${
          ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"
        }</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        ADMIN_ID,
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞.</b>`, {
      parse_mode: "HTML",
    });
    return ctx.scene.leave();
  }
);

const writeHelpAdmin = new Scenes.WizardScene(
  "write_help_admin",
  (ctx) => {
    const { id, username } = ctx.scene.state;
    ctx.session.write_admin = true;
    ctx.reply(`<b>–û—Ç–≤–µ—á–∞–µ–º > @${username}</b>`, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_user_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.scene.state;

    if (ctx.callbackQuery?.data.startsWith("user") && ctx.session.write_admin) {
      ctx.session.write_admin = false;
      return ctx.scene.leave();
    }

    if (
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_admin = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    ctx.session.write_admin = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(id, photo.file_id, {
        caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
        \n<blockquote>${ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"}</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        id,
        `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>`, { parse_mode: "HTML" });
    return ctx.scene.leave();
  }
);

const orderFollowers = new Scenes.WizardScene(
  "order_followers",
  (ctx) => {
    ctx.session.order_scena = true;

    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = followers.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (
      ctx.message?.text >= currentService.min &&
      ctx.message?.text <= currentService.max
    ) {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
      ctx.wizard.state.amount = ctx.message?.text * 1;
      ctx.wizard.state.pay =
        (currentService.rate / 1000) * (ctx.message?.text * 1);
      ctx.wizard.state.currentService = currentService;
      return ctx.wizard.next();
    } else {
      ctx.reply(
        `<b>üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–¶–µ–Ω–Ω–∞ –∑–∞ 1—à—Ç: ${(currentService.rate / 1000).toLocaleString(
          "ru-RU"
        )}</blockquote>
<blockquote>–ú–∏–Ω–∏–º—É–º: ${currentService.min.toLocaleString("ru-RU")}</blockquote>
<blockquote>–ú–∞–∫—Å–∏–º—É–º: ${currentService.max.toLocaleString(
          "ru-RU"
        )}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  },
  (ctx) => {
    console.log(ctx.callbackQuery?.data);
    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = followers.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (ctx.message?.text.includes("https://t.me/")) {
      dataBase.findOne({ id: ctx.from.id }).then((res_0) => {
        if (res_0.balance >= ctx.wizard.state.pay) {
          const idOrder = refCode();
          const URL = ctx.message?.text.trim();
          orderBase
            .insertOne({
              id: idOrder,
              customer: ctx.from.id,
              service: currentService.service,
              amount: ctx.wizard.state.amount,
              price: ctx.wizard.state.pay,
              url: URL,
              ready: false,
            })
            .then((res) => {
              ctx.reply(
                `<b>üìù –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑: #${idOrder}</b>
  
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.amount.toLocaleString(
                  "ru-RU"
                )}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString(
                  "ru-RU"
                )}‚ÇΩ</blockquote>
<blockquote>–°—ã–ª–∫–∞: ${URL}</blockquote> `,
                {
                  parse_mode: "HTML",
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                          callback_data:`pay_order_${idOrder}`,
                        },
                      ],
                    ],
                  },
                }
              );
              console.log("CREATE ORDER");
              ctx.session.order_scena = false;
              return ctx.scene.leave();
            });
        }
        else{
          ctx.reply(`<b>‚ö†Ô∏è –£–ø—Å —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: </b>
<blockquote>üí∞ –ë–∞–ª–∞–Ω—Å: ${res_0.balance.toLocaleString("ru-RU")}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString("ru-RU")}‚ÇΩ</blockquote>
    `,
            {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
                  [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
                ],
              },
            }
          );
          ctx.session.order_scena = false;
          return ctx.scene.leave();
        }
      });
    } else {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>
        
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  }
);







const orderBoosts = new Scenes.WizardScene(
  "order_boosts",
  (ctx) => {
    ctx.session.order_scena = true;

    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = boosts.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (
      ctx.message?.text >= currentService.min &&
      ctx.message?.text <= currentService.max
    ) {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
      ctx.wizard.state.amount = ctx.message?.text * 1;
      ctx.wizard.state.pay =
        (currentService.rate) * (ctx.message?.text * 1);
      ctx.wizard.state.currentService = currentService;
      return ctx.wizard.next();
    } else {
      ctx.reply(
        `<b>üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–¶–µ–Ω–Ω–∞ –∑–∞ 1—à—Ç: ${(currentService.rate).toLocaleString(
          "ru-RU"
        )}‚ÇΩ</blockquote>
<blockquote>–ú–∏–Ω–∏–º—É–º: ${currentService.min.toLocaleString("ru-RU")}</blockquote>
<blockquote>–ú–∞–∫—Å–∏–º—É–º: ${currentService.max.toLocaleString(
          "ru-RU"
        )}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  },
  (ctx) => {
    console.log(ctx.callbackQuery?.data);
    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = boosts.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (ctx.message?.text.includes("https://t.me/")) {
      dataBase.findOne({ id: ctx.from.id }).then((res_0) => {
        if (res_0.balance >= ctx.wizard.state.pay) {
          const idOrder = refCode();
          const URL = ctx.message?.text.trim();
          orderBase
            .insertOne({
              id: idOrder,
              customer: ctx.from.id,
              service: currentService.service,
              amount: ctx.wizard.state.amount,
              price: ctx.wizard.state.pay,
              url: URL,
              ready: false,
            })
            .then((res) => {
              ctx.reply(
                `<b>üìù –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑: #${idOrder}</b>
  
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.amount.toLocaleString(
                  "ru-RU"
                )}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString(
                  "ru-RU"
                )}‚ÇΩ</blockquote>
<blockquote>–°—ã–ª–∫–∞: ${URL}</blockquote> `,
                {
                  parse_mode: "HTML",
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                          callback_data:`pay_order_${idOrder}`,
                        },
                      ],
                    ],
                  },
                }
              );
              console.log("CREATE ORDER");
              ctx.session.order_scena = false;
              return ctx.scene.leave();
            });
        }
        else{
          ctx.reply(`<b>‚ö†Ô∏è –£–ø—Å —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: </b>
<blockquote>üí∞ –ë–∞–ª–∞–Ω—Å: ${res_0.balance.toLocaleString("ru-RU")}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString("ru-RU")}‚ÇΩ</blockquote>
    `,
            {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
                  [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
                ],
              },
            }
          );
          ctx.session.order_scena = false;
          return ctx.scene.leave();
        }
      });
    } else {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>
        
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  }
);




const createOrder = new Scenes.WizardScene(
  "create_order",
  (ctx) => {
    ctx.session.order_scena = true;

    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = obj.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (
      ctx.message?.text >= currentService.min &&
      ctx.message?.text <= currentService.max
    ) {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
      ctx.wizard.state.amount = ctx.message?.text * 1;
      ctx.wizard.state.pay =
        (currentService.rate / 1000) * (ctx.message?.text * 1);
      ctx.wizard.state.currentService = currentService;
      return ctx.wizard.next();
    } else {
      ctx.reply(
        `<b>üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b>

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–¶–µ–Ω–Ω–∞ –∑–∞ 1—à—Ç: ${(currentService.rate / 1000).toLocaleString(
          "ru-RU"
        )}‚ÇΩ</blockquote>
<blockquote>–ú–∏–Ω–∏–º—É–º: ${currentService.min.toLocaleString("ru-RU")}</blockquote>
<blockquote>–ú–∞–∫—Å–∏–º—É–º: ${currentService.max.toLocaleString(
          "ru-RU"
        )}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  },
  (ctx) => {
    console.log(ctx.callbackQuery?.data);
    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    const currentService = obj.find(
      (item) => item.service == ctx.wizard.state.service
    );

    if (ctx.message?.text.includes("https://t.me/")) {
      dataBase.findOne({ id: ctx.from.id }).then((res_0) => {
        if (res_0.balance >= ctx.wizard.state.pay) {
          const idOrder = refCode();
          const URL = ctx.message?.text.trim();
          orderBase
            .insertOne({
              id: idOrder,
              customer: ctx.from.id,
              service: currentService.service,
              amount: ctx.wizard.state.amount,
              price: ctx.wizard.state.pay,
              url: URL,
              ready: false,
            })
            .then((res) => {
              ctx.reply(
                `<b>üìù –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑: #${idOrder}</b>
  
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.amount.toLocaleString(
                  "ru-RU"
                )}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString(
                  "ru-RU"
                )}‚ÇΩ</blockquote>
<blockquote>–°—ã–ª–∫–∞: ${URL}</blockquote> `,
                {
                  parse_mode: "HTML",
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                          callback_data:`pay_order_${idOrder}`,
                        },
                      ],
                    ],
                  },
                }
              );
              console.log("CREATE ORDER");
              ctx.session.order_scena = false;
              return ctx.scene.leave();
            });
        }
        else{
          ctx.reply(`<b>‚ö†Ô∏è –£–ø—Å —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: </b>
<blockquote>üí∞ –ë–∞–ª–∞–Ω—Å: ${res_0.balance.toLocaleString("ru-RU")}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${ctx.wizard.state.pay.toLocaleString("ru-RU")}‚ÇΩ</blockquote>
    `,
            {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
                  [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
                ],
              },
            }
          );
          ctx.session.order_scena = false;
          return ctx.scene.leave();
        }
      });
    } else {
      ctx.reply(
        `<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>
        
<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "cancel_scena",
                },
              ],
            ],
          },
        }
      );
    }
  }
);




const bonusOrder = new Scenes.WizardScene(
  "bonus_order",
  (ctx) => {
    ctx.session.order_scena = true;

    if (ctx.callbackQuery?.data === "cancel_scena") {
      ctx.session.order_scena = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    const currentService = obj.find((item) => item.service == 84);

    


    



    if (ctx.message?.text.includes("https://t.me/")) {
      const URL = ctx.message?.text.trim();
      const currentPrice = (currentService.rate/1000)*300;
      const idOrder = `FIRST_${refCode()}`;
          orderBase
            .insertOne({
              id: idOrder,
              customer: ctx.from.id,
              service: 84,
              amount: 300,
              price: currentPrice,
              url: URL,
              ready: true,
            })
            .then((res) => {
              ctx.reply(`<b>‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω: #${idOrder}</b>
–û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

<blockquote><b>–£—Å–ª—É–≥–∞:</b> –ë–æ–Ω—É—Å –æ—Ç HardBoost</blockquote>
<blockquote><b>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b> 100</blockquote>
<blockquote><b>–°—ã–ª–∫–∞:</b> ${URL}</blockquote> `,
                {
                  parse_mode: "HTML"
                }
              );
              dataBase.updateOne({ id: ctx.from.id }, { $set: { bonus:false }});


              axios(`https://optsmm.ru/api/v2?action=add&service=84&link=${URL}&quantity=300&key=${OPTSMM_KEY}`)
              .then(optsmm => {
                console.log("CREATE ORDER", URL);
              });
              
              ctx.session.order_scena = false;
              return ctx.scene.leave();
            });
        

      
    } else {
      ctx.reply(`<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/username</code>
        
<blockquote><b>–£—Å–ª—É–≥–∞:</b> –ë–æ–Ω—É—Å –æ—Ç HardBoost</blockquote>
<blockquote><b>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ:</b> 100</blockquote>
        `,
              {
                parse_mode: "HTML",
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data: "cancel_scena",
                      },
                    ],
                  ],
                },
              }
            );
    }
  }
);




















const stage = new Scenes.Stage([writeHelp, writeHelpAdmin, createOrder, orderBoosts, bonusOrder]);
bot.use(stage.middleware());







// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é inline –∫–Ω–æ–ø–∫–∏
bot.action(/^user/i, async (ctx) => {
  if (!ctx.session.write_admin) {
    ctx.session.write_admin = false;
    const [, id, username] = ctx.match.input.split("_");
    ctx.scene.enter("write_help_admin", { id, username });
  }
});

bot.action(/^followers_/i, async (ctx) => {
  if (!ctx.session.order_scena) {
    ctx.session.order_scena = false;
    const [, id, service] = ctx.match.input.split("_");
    ctx.scene.enter("create_order", { id, service });
  }
});
bot.action(/^views_/i, async (ctx) => {
  if (!ctx.session.order_scena) {
    ctx.session.order_scena = false;
    const [, id, service] = ctx.match.input.split("_");
    ctx.scene.enter("create_order", { id, service });
  }
});


bot.action(/^reactions_/i, async (ctx) => {
  if (!ctx.session.order_scena) {
    ctx.session.order_scena = false;
    const [, id, service] = ctx.match.input.split("_");
    ctx.scene.enter("create_order", { id, service });
  }
});

bot.action(/^boosts_/i, async (ctx) => {
  if (!ctx.session.order_scena) {
    ctx.session.order_scena = false;
    const [, id, service] = ctx.match.input.split("_");
    ctx.scene.enter("order_boosts", { id, service });
  }
});

bot.action(/^stars_/i, async (ctx) => {
  if (!ctx.session.order_scena) {
    ctx.session.order_scena = false;
    const [, id, service] = ctx.match.input.split("_");
    ctx.scene.enter("create_order", { id, service });
  }
});

bot.action(/^status_order_/i, async (ctx) => {
  const [,, order] = ctx.match.input.split("_");
  axios(`https://optsmm.ru/api/v2?action=status&order=${order}&key=${OPTSMM_KEY}`)
  .then(optsmm => {
    console.log(optsmm.data);
    ctx.reply(`<b>üëÅÔ∏è –°—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑–∞: </b>    
<blockquote>üîÑ –°—Ç–∞—Ç—É—Å: ${optsmm.data.status}</blockquote>
<blockquote>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${(optsmm.data.remains*1).toLocaleString("ru-RU")}</blockquote>
<blockquote>üí∞ –ó–∞—Ä—è–¥: ${(optsmm.data.charge*1).toLocaleString("ru-RU")}‚ÇΩ</blockquote>
`,
      {
        parse_mode: "HTML",
      }
    );
  });
  
});



bot.action(/^pay_order_/i, async (ctx) => {
  const id = ctx.from.id;
    const idOrder = ctx.match.input.split("_")[2];
    orderBase.findOne({ id: idOrder }).then(res_0 => {
      if(!res_0.ready){ 
        dataBase.findOne({ id: id }).then(res_1 => {
          if(res_1.balance >= res_0.price){
            axios(`https://optsmm.ru/api/v2?action=add&service=${res_0.service}&link=${res_0.url}&quantity=${res_0.amount}&key=${OPTSMM_KEY}`)
            .then(optsmm => {
              ctx.deleteMessage();
              dataBase.updateOne({ id: id }, { $inc : { balance: -res_0.price }});
              orderBase.updateOne({ id: idOrder }, { $set : { ready: true, order: optsmm.data.order}});
              const currentService = obj.find((item) => item.service == res_0.service);
              ctx.reply(`<b>‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω: #${idOrder}</b>
–û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

<blockquote>–£—Å–ª—É–≥–∞: ${currentService.name}</blockquote>
<blockquote>–í–∞—à–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${res_0.amount.toLocaleString("ru-RU")}</blockquote>
<blockquote>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${res_0.price.toLocaleString("ru-RU")}‚ÇΩ</blockquote>
<blockquote>–°—ã–ª–∫–∞: ${res_0.url}</blockquote> `,
                {
                parse_mode: "HTML",
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: "üëÅÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
                        callback_data: `status_order_${optsmm.data.order}`,
                      },
                    ],
                  ],
                },
                }
              );
              console.log('–û–ø–∞–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ');

            })
            .catch(() => {
              ctx.reply(`<b>‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞: #${idOrder}</b>
–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
                `,
                {
                  parse_mode: "HTML"
                });
                console.log('–û–ø–∞–ª–∞—Ç–∞ –Ω–µ —É—Å–ø–µ—à–Ω–æ');
            })
          }
        })
      }
      else{
        console.log('–£–∂–µ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ');
      }
    });  
});


bot.action(/^pay_umoney_/i, async (ctx) => {
  const id = ctx.from.id;
  const amountOrder = ctx.match.input.split("_")[2];

  const currenLable = refCode(10);

  const link = createQuickpayLink({ receiver: "4100119146265962", sum: amountOrder*1, label: currenLable, targets: `–û–ø–ª–∞—Ç–∞ #${currenLable}` });


    orderBase.insertOne( { id, lable: currenLable, amount: amountOrder*1, status: false }).then(res_2 => {
      ctx.reply(`<b>üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ #${currenLable}</b>
<blockquote><b>‚ö°Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å–µ—Ä–≤–∏—Å —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3% –∫–æ–º–∏—Å—Å–∏–∏, –Ω–æ –º—ã –ø–æ–∫—Ä—ã–≤–∞–µ–º –µ—ë –∑–∞ –≤–∞—Å! </b> </blockquote>`
            ,{  
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [ { text: `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${amountOrder}‚ÇΩ`, url: link } ],
                  [ { text: `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É`, callback_data: `umoney_lable_${currenLable}` } ]
                ] 
              }
            });
    })
    


});

bot.action(/^umoney_lable_/i, async (ctx) => {
  const id = ctx.from.id;
  const currenLable = ctx.match.input.split("_")[2];

  console.log(currenLable);

  const response = await axios.post(
    "https://yoomoney.ru/api/operation-history",
    { label: currenLable }, // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–∞—à–µ–º—É label
      {
        headers: {
          Authorization: `Bearer ${process.env.ACCESS_TOKEN}`,
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
  
    const operations = response.data.operations || [];
    if (operations.length === 0) {
      ctx.reply(`<b>‚ùå –ü–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º #${currenLable} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>`, { parse_mode: 'HTML'});
      return false;
    }
  
    const payment = operations[0]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂ —Å —ç—Ç–∏–º label
    if (payment.status === "success") {
      console.log(payment)
      await ctx.deleteMessage();
     
      orderBase.findOne({ lable: currenLable }).then(async (order) => {
        ctx.reply(`<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ #${currenLable}</b>
<blockquote>C—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>${order.amount}‚ÇΩ</b></blockquote>`, { parse_mode: 'HTML'});
        orderBase.updateOne({ lable: currenLable }, { $set: { status: true } });
        dataBase.updateOne({ id: order.id }, { $inc: { balance: order.amount*1 } });
      });
      return true;
    } else {
      ctx.reply("‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω");
      return false;
    }
  

});


bot.action(/^pay_crypto_/i, async (ctx) => {
  const id = ctx.from.id;
  const amountOrder = ctx.match.input.split("_")[2];
  console.log(amountOrder)

  axios.post(`https://pay.crypt.bot/api/createInvoice`,
    {
      currency_type: "fiat", 
      fiat: "RUB",           
      amount: amountOrder,       
      accepted_assets: "USDT",
      description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amountOrder}‚ÇΩ`
    },
    {
      headers: {
        "Crypto-Pay-API-Token": process.env.TOKEN_CRYPTO,
      },
    }
  ).then(res => {
    const { invoice_id, amount, created_at, bot_invoice_url } = res.data.result;

    orderBase.insertOne( { invoice_id, amount, created_at, bot_invoice_url, id }).then(res_2 => {
      ctx.reply(`<b>üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>
<blockquote><b>‚ö°Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å–µ—Ä–≤–∏—Å —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3% –∫–æ–º–∏—Å—Å–∏–∏, –Ω–æ –º—ã –ø–æ–∫—Ä—ã–≤–∞–µ–º –µ—ë –∑–∞ –≤–∞—Å! </b> </blockquote>`
            ,{  
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [ { text: `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${amountOrder}‚ÇΩ`, url: bot_invoice_url } ]
                ] 
              }
            });
    })
    
  })

});






bot.action("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.action("menu", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/qYJqZjqG/card-1001.jpg", {
    caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
          { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
        ],
        [
          { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
          { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
        ],
        [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
        [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});

bot.action("menu_back", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg",
      caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
            { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
          ],
          [
            { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
            { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
          ],
          [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
          [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
          [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
        ],
      },
    }
  );
});

bot.action("pay_balance", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/tTQ574gv/card-1002.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</b>",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üí≥ –ö–∞—Ä—Ç–∞", callback_data: `pay_umoney` },
            { text: "üß† –ö—Ä–∏–ø—Ç–∞", callback_data: `pay_crypto` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }],
        ],
      },
    }
  );
});

bot.action("pay_umoney", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/fbWNWJY/card-1003.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ÆMoney.</b>",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "50‚ÇΩ", callback_data: `pay_umoney_50` },
            { text: "100‚ÇΩ", callback_data: `pay_umoney_100` },
            { text: "150‚ÇΩ", callback_data: `pay_umoney_150` },
          ],
          [
            { text: "200‚ÇΩ", callback_data: `pay_umoney_200` },
            { text: "250‚ÇΩ", callback_data: `pay_umoney_250` },
            { text: "300‚ÇΩ", callback_data: `pay_umoney_300` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `pay_balance` }],
        ],
      },
    }
  );
});



bot.action("pay_crypto", async (ctx) => {
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.ibb.co/JRwY2T6L/card-1004.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ö—Ä–∏–ø—Ç—É.</b>",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "100‚ÇΩ", callback_data: `pay_crypto_100` },
            { text: "200‚ÇΩ", callback_data: `pay_crypto_200` },
            { text: "300‚ÇΩ", callback_data: `pay_crypto_300` },
          ],
          [
            { text: "500‚ÇΩ", callback_data: `pay_crypto_500` },
            { text: "1000‚ÇΩ", callback_data: `pay_crypto_1000` },
            { text: "5000‚ÇΩ", callback_data: `pay_crypto_5000` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `pay_balance` }],
        ],
      },
    }
  );
});


bot.action("get_bonus", async (ctx) => {
  await ctx.deleteMessage();
  dataBase.findOne({ id: ctx.from.id}).then(user => {
    if(user.bonus){
      console.log(user.bonus)
      if (!ctx.session.order_scena) {
        ctx.session.order_scena = false;
        ctx.scene.enter("bonus_order");
      }
    }
    else{
      const { id } = ctx.from;

ctx.replyWithPhoto("https://i.ibb.co/0jmGR3S4/card-1000.jpg", {
    caption: ` <b>üîí –ë–æ–Ω—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>

<blockquote><b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üë•</b>
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üöÄ
</blockquote>
  
`,
    parse_mode: "HTML",
    reply_markup: {
      keyboard: [
        [{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }],
        [{ text: "üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: `translate` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
 ],
    },
  });
    }

  });
});




bot.action("remove_post", async (ctx) => {
  await ctx.deleteMessage();
});





//–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∫—Ä—É—Ç–∫–∏

bot.action("buy_followers", async (ctx) => {
  const { id } = ctx.from;

  const keyboard = followers.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `followers_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.postimg.cc/TP7QrpSm/card-subers.jpg",
      caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—á—É.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }
  );
});

bot.action("buy_views", async (ctx) => {
  const { id } = ctx.from;
  const keyboard = views.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `views_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.postimg.cc/gcRq0SY3/card-views.jpg",
      caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—á—É.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }
  );
});

bot.action("buy_reactions", async (ctx) => {
  const { id } = ctx.from;
  const keyboard = reactions.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `reactions_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.postimg.cc/rsCrNHmb/card-reactions.jpg",
      caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1 —Ç—ã—Å—è—á—É.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }
  );
});

bot.action("buy_boosts", async (ctx) => {
  const { id } = ctx.from;
  const keyboard = boosts.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `boosts_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.postimg.cc/508Yfrw0/card-boosts.jpg",
      caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Ö —Ü–µ–Ω–Ω—ã –∑–∞ 1—à—Ç.",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }
  );
});

bot.action("buy_stars", async (ctx) => {
  const { id } = ctx.from;
  const keyboard = stars.map((item) => {
    return [
      {
        text: `${item.name} ‚Üí ${item.rate.toFixed(1)}‚ÇΩ`,
        callback_data: `stars_${id}_${item.service}`,
      },
    ];
  });

  keyboard.push([{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }]);

  await ctx.editMessageMedia(
    {
      type: "photo",
      media: "https://i.postimg.cc/Wb13yzft/card-1005.jpg",
      caption: "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–¥–µ–Ω–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –æ–ø—Ç–æ–º –∑–∞ 1 —Ç—ã—Å—è—á—É",
      parse_mode: "HTML",
    },
    {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    }
  );
});














// –ü–æ–ª—É—á–µ–Ω–∏–µ id –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏


bot.on("channel_post", async (ctx) => {
  const { text, chat: { id, title } } = ctx.channelPost;
  
  if(text.includes('/start')){
    const amount = text.split(" ")[1];
    const URL = text.split(" ")[2];


    await ctx.deleteMessage();
    ctx.replyWithPhoto("https://i.postimg.cc/W3nhtkWc/card-channel.jpg",{ caption:`<b>üöÄ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞–∫—Ä—É—á–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é HardBoost!</b>

<b>‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ</b>
<b>üí∞ –°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ</b>

<blockquote><b>üéÅ –ë–æ–Ω—É—Å –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:</b>
–ü–æ–ª—É—á–∏—Ç–µ 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äì –±–µ–∑ —Ä–∏—Å–∫–∞, –±–µ–∑ —É—Å–ª–æ–≤–∏–π!</blockquote>

<blockquote>üí° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏, –∫–∞–∫ –ª–µ–≥–∫–æ —Ä–∞—Å—Ç—ë—Ç –∫–∞–Ω–∞–ª —Å HardBoost!</blockquote>`, 
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", url: `https://t.me/hardBoost_bot` }]
      ],
    }
    });


    dataBase.findOne({ chat_id: id }).then(async (res) => {
      console.log(res?.subscribers);
      if(!res){
        axios(`https://optsmm.ru/api/v2?action=add&service=84&link=${URL}&quantity=300&key=${OPTSMM_KEY}`)
        .then(optsmm => {
          console.log(optsmm.data.order);
          dataBase.insertOne({ chat_id: id, subscribers: 0, limit: amount*1, url: URL, order: optsmm.data.order });
        });
      }
      else{
        //dataBase.updateOne({ chat_id: chat.id }, { $inc: { subscribers: 1 } });
      }
    });

  }

});

bot.command("check", async (ctx) => {
  const { id } = ctx.from;
  const use = await bot.telegram.getChatMember(-1002760111651, id);
  if (use.status !== "left") {
    ctx.reply("+");
  } else {
    ctx.reply("-");
  }
});

// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–∑ keyboard
bot.hears("üéÅ –ë–æ–Ω—É—Å", async (ctx) => {
  const { id } = ctx.from;
  
  ctx.replyWithPhoto("https://i.postimg.cc/vTqQy7ST/card-bonus-2.jpg", {
    caption: ` <b>üéÅ –ë–æ–Ω—É—Å –æ—Ç HardBoost!</b>

<blockquote><b>–ö–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ä–∏–º 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üë• –Ω–∞ –≤–∞—à Telegram-–∫–∞–Ω–∞–ª!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏ üöÄ</b>

üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏—Ö –ø–µ—Ä–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
</blockquote>
  
`,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data: `get_bonus` }]
      ],
    },
  });
  

});


bot.hears("üóÇÔ∏è –ú–µ–Ω—é", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.replyWithPhoto("https://i.ibb.co/qYJqZjqG/card-1001.jpg", {
    caption: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚ú® –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data: `buy_followers` },
          { text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data: `buy_views` },
        ],
        [
          { text: "‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data: `buy_reactions` },
          { text: "‚òÑÔ∏è –ë—É—Å—Ç –ö–∞–Ω–∞–ª–∞", callback_data: `buy_boosts` },
        ],
        [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `buy_stars` }],
        [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});
bot.hears("üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx) => {
  await ctx.deleteMessage();
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});
bot.hears("üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;
  dataBase.findOne({ username }).then(async (res) => {
    await ctx.deleteMessage();
    await ctx.reply(
      `<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ üë® –∞–∫–∫–∞—É–Ω—Ç—É:</b>\nüÜî ID: <code>${res.id}</code>
üí∞ –ë–∞–ª–∞–Ω—Å: ${res.balance.toLocaleString("ru-RU")} ‚ÇΩ

ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: - /ref
‚Äç‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${res.referrals.toLocaleString("ru-RU")}
`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
          ],
        },
      }
    );
  });
});




// –ö–æ–º–º–∞–Ω–¥—ã
bot.command("start", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;
  const refHashRaw = ctx.payload;

  console.log(refHashRaw);

  dataBase.findOne({ id, first_name, username }).then(async (res) => {
    if (!res) {
      console.log("–ó–∞–ø–∏—Å—å  —Å–æ–∑–¥–∞–µ—Ç—å—Å—è");
      dataBase.insertOne({
        id,
        first_name,
        username,
        language_code,
        referrals: 0,
        bonus: true,
        ref_code: refCode(),
        prefer: refHashRaw ? refHashRaw.split("_")[1] : 0 ,
        date: dateNow(),
        balance: 14809,
      });
      if (refHashRaw) {
        const refHash = refHashRaw.split("_")[1];
        dataBase.updateOne({ ref_code: refHash }, { $inc: { referrals: 1 } });
      }
    } else {
      console.log("–ó–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞");
    }
  });

  ctx.replyWithPhoto("https://i.postimg.cc/76nd8xQZ/card-start-2.jpg", {
    caption: ` <b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HardBoost!</b>

<blockquote><b>–¢–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞:</b>
‚ú® <b>–ù–∞–∫—Ä—É—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b> ‚Äì –±–æ—Ç—ã 
üëÄ <b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b> ‚Äì –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚ù§Ô∏è <b>–†–∞–∑–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏</b>  ‚Äì –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤
</blockquote>
<blockquote><b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>
üìå <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç</b> ‚Äì –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
üìå <b>–ê–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ</b> ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
üìå <b>–õ—É—á—à–∏–µ —Ü–µ–Ω—ã</b> ‚Äì –¥–µ—à–µ–≤–ª–µ, —á–µ–º —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
</blockquote>
<blockquote><b>üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ–Ω—É—Å:</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /bonus –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞.</blockquote>
`,
    parse_mode: "HTML",
    reply_markup: {
      keyboard: [
        [{ text: "üéÅ –ë–æ–Ω—É—Å", callback_data: `bonus` }],
        [{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }],
        [{ text: "üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: `translate` }],
        [{ text: "üë®‚Äçüíª –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: `help` }],
      ],
    },
  });
});

bot.command("ref", async (ctx) => {
  const { id } = ctx.from;
  dataBase.findOne({ id }).then(async (res) => {
    const refLink = `https://t.me/${ctx.botInfo.username}?start=ref_${res.ref_code}`;
    await ctx.replyWithPhoto("https://i.postimg.cc/xTKMSXYY/card-refferals.jpg" ,{ caption:`<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>
    
<code>${refLink}</code>

<blockquote><b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +3% –æ—Ç –∫–∞–∂–¥–æ–π –∏—Ö –ø–æ–∫—É–ø–∫–∏</b> üí∏
–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤! üéÅ</blockquote>`,
       parse_mode: "HTML" }
    );
  });
});



bot.command("bonus", async (ctx) => {
  const { id } = ctx.from;

  ctx.replyWithPhoto("https://i.postimg.cc/vTqQy7ST/card-bonus-2.jpg", {
    caption: ` <b>üéÅ –ë–æ–Ω—É—Å –æ—Ç HardBoost!</b>

<blockquote><b>–ö–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ä–∏–º 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üë• –Ω–∞ –≤–∞—à Telegram-–∫–∞–Ω–∞–ª!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏ üöÄ</b>

üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏—Ö –ø–µ—Ä–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
</blockquote>
  
`,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data: `get_bonus` }]
      ],
    },
  });
});




bot.command("drop", async (ctx) => {
  dataBase.deleteMany({});
  ctx.reply("DROP COLLECTION");
});
bot.command("drops", async (ctx) => {
  orderBase.deleteMany({});
  ctx.reply("DROP COLLECTION");
});

bot.command("about", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/rf08CWL0/card-1008.jpg", {
    caption: `‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n<blockquote>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç

‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
‚Ä¢ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º

‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏
‚Ä¢ –û–ø–ª–∞—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ÆMoney

‚Ä¢ –ü–æ–∫—É–ø–∞ –∑–≤–µ–∑–¥
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑–∞–≥—Ä—ã—à–µ–π
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–∏–∫—Ç–æ–∫–∞
</blockquote>\nüì± <b>–ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n<blockquote>‚Ä¢ –ö–æ–ø–∏—è –∫–ª–∏–∫–µ—Ä–∞ Notcoin
‚Ä¢ –ö–æ–ø–∏—è —Ñ–µ–π–∫ –∫–∞–∑–∏–Ω–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∏
</blockquote>

`,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [[{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }]],
    },
  });
});

bot.command("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.command("users", async (ctx) => {
  dataBase.find({}).then((res) => {
    //ctx.reply("```js" + JSON.stringify(res, null, 2) + "```", {
    //  parse_mode: "Markdown",
   // });
   console.log(res)
  });
});
bot.command("orders", async (ctx) => {
  orderBase.find({}).then((res) => {
    console.log(res)
    // ctx.reply("```js" + JSON.stringify(res, null, 2) + "```", {
    //   parse_mode: "Markdown",
    // });
  });
});

//bot.on('text', ctx => console.log(ctx.update.message.from));





const delay = (ms) =>
  new Promise((res) => {
    setTimeout(() => res(), ms);
  });

bot.launch();






// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

function refCode(n = 6) {
  const symbols =
    "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890";
  let user_hash = "";
  for (let i = 0; i != n; i++) {
    user_hash += symbols[Math.floor(Math.random() * symbols.length)];
  }
  return user_hash;
}

function createQuickpayLink({ receiver, sum, label, targets, paymentType = "AC" }) {
  const params = querystring.stringify({
    receiver,
    "quickpay-form": "shop",
    targets,
    paymentType,
    sum,
    label
  });

  return `https://yoomoney.ru/quickpay/confirm.xml?${params}`;
}

function dateNow() {
  return new Date().getTime();
}



app.post("/pay", async (req, res) => {
  const update = req.body;
  console.log(req.body);
  if (update.update_type === "invoice_paid") {
    console.log("üí∏ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!");
    const invoice = update.payload;
    const currentAmount = (update.payload.amount*1)*0.97;
    orderBase.findOne({ invoice_id: invoice.invoice_id }).then((res_2) => {
      console.log(res_2)
      if (res_2){
        dataBase.updateOne({ id: res_2.id }, { $inc: { balance: currentAmount } });
      }
    })
  }
  res.send({ message: "Hello World" });
});




app.get("/sleep", async (req, res) => {
  res.send({ type: 200 });
});

app.listen(3000, (err) => {
  err ? err : console.log("STARTED SERVER");
});
